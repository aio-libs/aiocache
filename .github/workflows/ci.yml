name: CI

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install flake8 and black
      run: pip install flake8 black
    - name: Run linter
      run: |
        make lint
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
    - name: Run twine checker
      run: |
        twine check dist/*

  test:
    name: Test ${{ matrix.pyver }} redis ${{ matrix.redis }} memcached ${{ matrix.memcached }} ${{ matrix.ujson }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-20.04]
        pyver: ["3.6", "3.7", "3.8", "3.9"]
        ujson: ["ujson", "no-ujson"]
        redis: ["5.0.14", "6.2.6"]
        memcached: ["1.6.14"]
      fail-fast: false
    services:
      redis:
        image: redis:${{ matrix.redis }}
        ports:
        - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      memcached:
        image: memcached:${{ matrix.memcached }}
        ports:
        - 11211:11211
    runs-on: ${{ matrix.os }}
    env:
      OS: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
    - name: Install ujson
      if: ${{ matrix.ujson == 'ujson' }}
      run: pip install ujson
    - name: Install self and test dependencies
      run: python -m pip install -e ".[dev,redis,memcached,msgpack]"
    - name: Run unit tests
      run: |
        coverage run -m pytest tests/ut
        coverage combine
        coverage xml
    - name: Run acceptance tests
      run: pytest -sv tests/acceptance
    - name: Run functional tests
      run: bash examples/run_all.sh
    - name: Upload coverage
      uses: codecov/codecov-action@v2.1.0
      with:
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  deploy:
   name: Deploy
   runs-on: ubuntu-latest
   needs: test
   # Run only on pushing a tag
   if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
   steps:
   - name: Checkout
     uses: actions/checkout@v2.4.0
   - name: Setup Python 3.9
     uses: actions/setup-python@v2
     with:
       python-version: "3.9"
   - name: Install dependencies
     run:
       python -m pip install -U pip wheel twine
   - name: Make dists
     run:
       python setup.py sdist bdist_wheel
   - name: PyPI upload
     env:
       TWINE_USERNAME: __token__
       TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
     run: |
       twine upload dist/*
